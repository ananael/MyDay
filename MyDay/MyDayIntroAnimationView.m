//
// MyDayIntroAnimationView.m
// Generated by Core Animator version 1.3 on 8/22/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "MyDayIntroAnimationView.h"

@interface MyDayIntroAnimationView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation MyDayIntroAnimationView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,1536,2048)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 1536, 2048);
	__scaling__.center = CGPointMake(768.0, 1024.0);
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *starImage = [UIImageView new];
	starImage.bounds = CGRectMake(0, 0, 115.0, 110.0);
	UIImage *imgStarImage = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"star image.png" ofType:nil]];
	if ( imgStarImage == nil ) { NSLog(@"** Warning: Could not create image from 'star image.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	starImage.image = imgStarImage;
	starImage.contentMode = UIViewContentModeCenter;
	starImage.layer.position = CGPointMake(701.289, 941.500);
	starImage.alpha = 0.00;
	starImage.transform = CGAffineTransformMakeScale(1.50, 1.50);
	[__scaling__ addSubview:starImage];
	viewsByName[@"star image"] = starImage;

	UIImageView *dayImage = [UIImageView new];
	dayImage.bounds = CGRectMake(0, 0, 489.0, 294.0);
	UIImage *imgDayImage = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"day image.png" ofType:nil]];
	if ( imgDayImage == nil ) { NSLog(@"** Warning: Could not create image from 'day image.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	dayImage.image = imgDayImage;
	dayImage.contentMode = UIViewContentModeCenter;
	dayImage.layer.position = CGPointMake(1134.750, 803.500);
	dayImage.transform = CGAffineTransformMakeScale(1.50, 1.50);
	[__scaling__ addSubview:dayImage];
	viewsByName[@"day image"] = dayImage;

	UIImageView *myImage = [UIImageView new];
	myImage.bounds = CGRectMake(0, 0, 417.0, 283.0);
	UIImage *imgMyImage = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"my image.png" ofType:nil]];
	if ( imgMyImage == nil ) { NSLog(@"** Warning: Could not create image from 'my image.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	myImage.image = imgMyImage;
	myImage.contentMode = UIViewContentModeCenter;
	myImage.layer.position = CGPointMake(319.750, 1024.000);
	myImage.transform = CGAffineTransformMakeScale(1.50, 1.50);
	[__scaling__ addSubview:myImage];
	viewsByName[@"my image"] = myImage;

	self.viewsByName = viewsByName;
}

#pragma mark - my day intro

- (void)addMyDayIntroAnimation
{
	[self addMyDayIntroAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addMyDayIntroAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addMyDayIntroAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addMyDayIntroAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addMyDayIntroAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addMyDayIntroAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addMyDayIntroAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addMyDayIntroAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 1.500;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"MyDayIntro"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"MyDayIntro"]];
	}

	CAKeyframeAnimation *myImageOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	myImageOpacityAnimation.duration = 1.500;
	myImageOpacityAnimation.values = @[@(0.000), @(1.000), @(1.000)];
	myImageOpacityAnimation.keyTimes = @[@(0.000), @(0.800), @(1.000)];
	myImageOpacityAnimation.timingFunctions = @[linearTiming, linearTiming];
	myImageOpacityAnimation.beginTime = beginTime;
	myImageOpacityAnimation.fillMode = fillMode;
	myImageOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"my image"] layer] addAnimation:myImageOpacityAnimation forKey:@"my day intro_Opacity"];

	CAKeyframeAnimation *myImageTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	myImageTranslationYAnimation.duration = 1.500;
	myImageTranslationYAnimation.values = @[@(-1028.844), @(0.000), @(0.000)];
	myImageTranslationYAnimation.keyTimes = @[@(0.000), @(0.800), @(1.000)];
	myImageTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming];
	myImageTranslationYAnimation.beginTime = beginTime;
	myImageTranslationYAnimation.fillMode = fillMode;
	myImageTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"my image"] layer] addAnimation:myImageTranslationYAnimation forKey:@"my day intro_TranslationY"];

	CAKeyframeAnimation *dayImageOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	dayImageOpacityAnimation.duration = 1.500;
	dayImageOpacityAnimation.values = @[@(0.000), @(1.000), @(1.000)];
	dayImageOpacityAnimation.keyTimes = @[@(0.000), @(0.800), @(1.000)];
	dayImageOpacityAnimation.timingFunctions = @[linearTiming, linearTiming];
	dayImageOpacityAnimation.beginTime = beginTime;
	dayImageOpacityAnimation.fillMode = fillMode;
	dayImageOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"day image"] layer] addAnimation:dayImageOpacityAnimation forKey:@"my day intro_Opacity"];

	CAKeyframeAnimation *dayImageTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
	dayImageTranslationYAnimation.duration = 1.500;
	dayImageTranslationYAnimation.values = @[@(1200.000), @(0.000), @(0.000)];
	dayImageTranslationYAnimation.keyTimes = @[@(0.000), @(0.800), @(1.000)];
	dayImageTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming];
	dayImageTranslationYAnimation.beginTime = beginTime;
	dayImageTranslationYAnimation.fillMode = fillMode;
	dayImageTranslationYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"day image"] layer] addAnimation:dayImageTranslationYAnimation forKey:@"my day intro_TranslationY"];

	CAKeyframeAnimation *starImageOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	starImageOpacityAnimation.duration = 1.500;
	starImageOpacityAnimation.values = @[@(0.000), @(0.010), @(1.000)];
	starImageOpacityAnimation.keyTimes = @[@(0.000), @(0.767), @(1.000)];
	starImageOpacityAnimation.timingFunctions = @[linearTiming, linearTiming];
	starImageOpacityAnimation.beginTime = beginTime;
	starImageOpacityAnimation.fillMode = fillMode;
	starImageOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"star image"] layer] addAnimation:starImageOpacityAnimation forKey:@"my day intro_Opacity"];

	CAKeyframeAnimation *starImageScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	starImageScaleXAnimation.duration = 1.500;
	starImageScaleXAnimation.values = @[@(1.500), @(6.000), @(1.500)];
	starImageScaleXAnimation.keyTimes = @[@(0.000), @(0.800), @(1.000)];
	starImageScaleXAnimation.timingFunctions = @[linearTiming, linearTiming];
	starImageScaleXAnimation.beginTime = beginTime;
	starImageScaleXAnimation.fillMode = fillMode;
	starImageScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"star image"] layer] addAnimation:starImageScaleXAnimation forKey:@"my day intro_ScaleX"];

	CAKeyframeAnimation *starImageScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	starImageScaleYAnimation.duration = 1.500;
	starImageScaleYAnimation.values = @[@(1.500), @(6.000), @(1.500)];
	starImageScaleYAnimation.keyTimes = @[@(0.000), @(0.800), @(1.000)];
	starImageScaleYAnimation.timingFunctions = @[linearTiming, linearTiming];
	starImageScaleYAnimation.beginTime = beginTime;
	starImageScaleYAnimation.fillMode = fillMode;
	starImageScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"star image"] layer] addAnimation:starImageScaleYAnimation forKey:@"my day intro_ScaleY"];
}

- (void)removeMyDayIntroAnimation
{
	[self.layer removeAnimationForKey:@"MyDayIntro"];
	[[self.viewsByName[@"my image"] layer] removeAnimationForKey:@"my day intro_Opacity"];
	[[self.viewsByName[@"my image"] layer] removeAnimationForKey:@"my day intro_TranslationY"];
	[[self.viewsByName[@"day image"] layer] removeAnimationForKey:@"my day intro_Opacity"];
	[[self.viewsByName[@"day image"] layer] removeAnimationForKey:@"my day intro_TranslationY"];
	[[self.viewsByName[@"star image"] layer] removeAnimationForKey:@"my day intro_Opacity"];
	[[self.viewsByName[@"star image"] layer] removeAnimationForKey:@"my day intro_ScaleX"];
	[[self.viewsByName[@"star image"] layer] removeAnimationForKey:@"my day intro_ScaleY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"MyDayIntro"];
}

@end